; This is the Calva evaluation results output window.
; TIPS: The keyboard shortcut `ctrl+alt+o o` shows and focuses this window
;   when connected to a REPL session.
; Please see https://calva.io/output/ for more info.
; Happy coding! ♥️

; Jacking in...
; Connecting using "Leiningen" project type.
; You can make Calva auto-select this.
;   - See https://calva.io/connect-sequences/
; 
; Starting Jack-in Terminal: pushd /Users/patriktao/GitHub/EDAA40-2023/edaa40lab5 ; lein update-in :dependencies conj '[nrepl,"1.0.0"]' -- update-in :plugins conj '[cider/cider-nrepl,"0.28.5"]' -- update-in '[:repl-options,:nrepl-middleware]' conj '["cider.nrepl/cider-middleware"]' -- repl :headless ; popd
; Using host:port 127.0.0.1:61680 ...
; Hooking up nREPL sessions ...
; Connected session: clj
; TIPS:
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
; Evaluating code from settings: 'calva.autoEvaluateCode.onConnect.clj'
nil
clj꞉edaa40.user꞉>  ; Use `alt+enter` to evaluate
clj꞉edaa40.user꞉> 
; Jack-in done.
clj꞉edaa40.user꞉> 
nil
clj꞉edaa40.lab5꞉> 
nil
clj꞉edaa40.lab5꞉> 
nil
clj꞉edaa40.lab5꞉> 
#'edaa40.lab5/expand-and
clj꞉edaa40.lab5꞉> 
#'edaa40.lab5/expand-or
clj꞉edaa40.lab5꞉> 
#'edaa40.lab5/expand-implication
clj꞉edaa40.lab5꞉> 
#'edaa40.lab5/substitute
clj꞉edaa40.lab5꞉> 
#'edaa40.lab5/expand-forall
clj꞉edaa40.lab5꞉> 
#'edaa40.lab5/expand-exists
clj꞉edaa40.lab5꞉> 
#'edaa40.lab5/simplify-formula
clj꞉edaa40.lab5꞉> 
#'edaa40.lab5/formula
clj꞉edaa40.lab5꞉> 
#'edaa40.lab5/binary-T
clj꞉edaa40.lab5꞉> 
#'edaa40.lab5/binary-F
clj꞉edaa40.lab5꞉> 
#'edaa40.lab5/binary-not
clj꞉edaa40.lab5꞉> 
#'edaa40.lab5/binary-and
clj꞉edaa40.lab5꞉> 
#'edaa40.lab5/binary-or
clj꞉edaa40.lab5꞉> 
#'edaa40.lab5/binary-boolean-algebra
clj꞉edaa40.lab5꞉> 
#'edaa40.lab5/eval-formula
clj꞉edaa40.lab5꞉> 
#'edaa40.lab5/binary-truth-table-with-valuations
clj꞉edaa40.lab5꞉> 
#'edaa40.lab5/binary-truth-table
clj꞉edaa40.lab5꞉> 
truthtable-trivial : ERROR -- got' (1) ', expected ' ((1)) '
nil
clj꞉edaa40.lab5꞉> 
truthtable-vacuous : passed
nil
clj꞉edaa40.lab5꞉> 
truthtable-trivial : ERROR -- got' (1) ', expected ' ((1)) '
nil
clj꞉edaa40.lab5꞉> 
truthtable-a : passed
nil
clj꞉edaa40.lab5꞉> 
truthtable-not-a : passed
nil
clj꞉edaa40.lab5꞉> 
truthtable-<- : ERROR -- got' ((0 (0 1) (1 0)) (1 (0 1) (1 1))) ', expected ' ((0 0 1) (0 1 0) (1 0 1) (1 1 1)) '
nil
clj꞉edaa40.lab5꞉> 
#'edaa40.lab5/binary-truth-table-with-valuations
clj꞉edaa40.lab5꞉> 
truthtable-trivial : passed
nil
clj꞉edaa40.lab5꞉> 
truthtable-vacuous : ERROR -- got' ((0 (1)) (1 (1))) ', expected ' ((0 1) (1 1)) '
nil
clj꞉edaa40.lab5꞉> 
#'edaa40.lab5/binary-truth-table-with-valuations
clj꞉edaa40.lab5꞉> 
truthtable-trivial : passed
nil
clj꞉edaa40.lab5꞉> 
truthtable-vacuous : passed
nil
clj꞉edaa40.lab5꞉> 
truthtable-a : passed
nil
clj꞉edaa40.lab5꞉> 
truthtable-not-a : passed
nil
clj꞉edaa40.lab5꞉> 
truthtable-<- : passed
nil
clj꞉edaa40.lab5꞉> 
truthtable-3-vars : passed
nil
clj꞉edaa40.lab5꞉> 
#'edaa40.lab5/many-worlds
clj꞉edaa40.lab5꞉> 
#'edaa40.lab5/many-worlds-not
clj꞉edaa40.lab5꞉> 
#'edaa40.lab5/many-worlds-logic
clj꞉edaa40.lab5꞉> 
many-worlds-a : passed
nil
clj꞉edaa40.lab5꞉> 
many-worlds-not-a : passed
nil
clj꞉edaa40.lab5꞉> 
many-worlds-a&c : passed
nil
clj꞉edaa40.lab5꞉> 
many-worlds-implication-1 : passed
nil
clj꞉edaa40.lab5꞉> 
many-worlds-implication-2 : passed
nil
clj꞉edaa40.lab5꞉> 
